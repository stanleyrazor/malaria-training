{
  "hash": "74fbee7196eedf285a66a94ea3e728b7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data visualiaation with {ggplot2}\"\nauthor: \"Stanley Sayianka<br>-<br>Aug 19, 2025\"\nformat: \n  revealjs:\n    footer: \"[Credits: github.com/meghall06/neair](https://github.com/meghall06/neair)&nbsp;&nbsp;&nbsp;\"\n    theme: [moon, custom.scss]\n    preview-links: auto\n    chalkboard: \n      boardmarker-width: 5\nfrom: markdown+emoji\nexecute:\n  echo: true\n---\n\n\n\n# Data visualization\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n1 [2 3 4 5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\n## ggplot2\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n1 [2 3 4 5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\n<br>\n\n`ggplot2` is the data visualization package that is loaded with the `tidyverse` suite and can alternatively be loaded independently.\n\n<br>\n\nthe [g]{style=\"color:#cc0000\"}rammar of [g]{style=\"color:#cc0000\"}raphics maps data to the aesthetic attributes of geometric points\n\n. . .\n\n<br>\n\nencoding data into visual asttributes (e.g., length, color, position, size) is how we signify changes and comparisons\n\n---\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n1 [2 3 4 5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\nThe syntax :\n\n<br>\n\nWe use `+` to join the components of a ggplot object instead of the pipe `|>`\n\n<br>\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-2|4-6|8-9|11-12\"}\n# we need to pass our data\nggplot(data = your_data) +    \n  \n  # we need to specify the geometry object: line, point, histogram, bar, density, area etc.\n  # we also pass aesthetics including x/y variable, color, fill, size, shape, opacity etc.\n  geom_*.*(mapping = aes()) + \n                \n  # the labels: title, x-label, y-label, subtitles, caption              \n  labs(our_labels) +  \n  \n  # our themes including fonts, and other theming objects\n  theme_*.*()                 \n```\n:::\n\n\n\n---\n\n## Line chart\n\nFor the data visualization exercise, we will utilize the datasets from the previous sessions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1|2|3-4\"}\nmdata <- read.csv('data/interim/pfpr_intvn.csv')\nbusia <- mdata |> filter(county == 'Busia')\nggplot(busia) + \n  geom_line(aes(x = year, y = pfpr, col = residence))\n```\n:::\n\n\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1]{style=\"opacity:0.25\"} 2 [3 4 5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](NEAIR_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Adding functional elements (labels)\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1]{style=\"opacity:0.25\"} 2 [3 4 5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-2|3-5\"}\nggplot(busia) + \n  geom_line(aes(x = year, y = pfpr, col = residence)) + \n  labs(title = 'Plasmodium Falciparum Prevalence in Busia County',\n       y = 'Year',\n       x = 'PfPr (%)')\n```\n:::\n\n\n\n. . .\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](NEAIR_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Adding functional elements (themes)\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1]{style=\"opacity:0.25\"} 2 [3 4 5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-2|3-5|6|7\"}\nggplot(busia) + \n  geom_line(aes(x = year, y = pfpr, col = residence)) + \n  labs(title = 'Plasmodium Falciparum Prevalence in Busia County',\n       y = 'Year',\n       x = 'PfPr (%)') + \n  theme_bw()\n# other themes: theme_bw(), theme_light(), theme_minimal(), theme_gray(), theme_dark(), theme_classic()\n```\n:::\n\n\n\n. . .\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](NEAIR_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Scatter plots\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2]{style=\"opacity:0.25\"} 3 [4 5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-2|3-6\"}\nggplot(busia) + \n  geom_point(aes(x = itn_coverage, y = pfpr)) + \n  labs(title = 'The relationship between ITN use and PfPr',\n       x = 'ITN Coverage (%)',\n       y = 'PfPr (%)') + \n  theme_bw()\n```\n:::\n\n\n\n. . .\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](NEAIR_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Adding aesthetic elements (color, shape, size, alpha)\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2]{style=\"opacity:0.25\"} 3 [4 5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-2|3|4-7|8-9\"}\nggplot(busia) + \n  geom_point(aes(x = itn_coverage, y = pfpr),\n             color = 'red', size = 2, shape = 15, alpha = 1) + \n  labs(title = 'The relationship between ITN use and PfPr',\n       x = 'ITN Coverage (%)',\n       y = 'PfPr (%)') + \n  theme_bw()\n# try other colors, sizes, and shapes: 15, 16, 17, i.e. 1-20\n# alpha values are for opacity of points: ranging from 0-1\n```\n:::\n\n\n\n. . .\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](NEAIR_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Adding aesthetic elements (color)\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2]{style=\"opacity:0.25\"} 3 [4 5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-2|3-6\"}\nggplot(busia) + \n  geom_point(aes(x = itn_coverage, y = pfpr, color = residence)) + \n  labs(title = 'The relationship between ITN use and PfPr',\n       x = 'ITN Coverage (%)',\n       y = 'PfPr (%)') + \n  theme_bw()\n```\n:::\n\n\n\n. . .\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](NEAIR_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Adding functional elements (scale)\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2]{style=\"opacity:0.25\"} 3 [4 5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-2|3-4|5-8\"}\nggplot(busia) + \n  geom_point(aes(x = itn_coverage, y = pfpr, color = residence)) + \n  scale_x_continuous(labels = percent_format()) + \n  scale_y_continuous(labels = percent_format()) +\n  labs(title = 'The relationship between ITN use and PfPr',\n       x = 'ITN Coverage (%)',\n       y = 'PfPr (%)') + \n  theme_bw()\n```\n:::\n\n\n\n. . .\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](NEAIR_files/figure-revealjs/unnamed-chunk-16-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n\n## Adding functional elements (trends)\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2]{style=\"opacity:0.25\"} 3 [4 5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-2|3|4-5|6-9\"}\nggplot(busia) + \n  geom_point(aes(x = itn_coverage, y = pfpr, color = residence)) + \n  geom_smooth(aes(x = itn_coverage, y = pfpr)) + \n  scale_x_continuous(labels = percent_format()) + \n  scale_y_continuous(labels = percent_format()) +\n  labs(title = 'The relationship between ITN use and PfPr',\n       x = 'ITN Coverage (%)',\n       y = 'PfPr (%)') + \n  theme_bw()\n```\n:::\n\n\n\n. . .\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](NEAIR_files/figure-revealjs/unnamed-chunk-18-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\nPractial: Implement residence-specific trends, \n<br>\nhint: `color = residence`\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](NEAIR_files/figure-revealjs/unnamed-chunk-19-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Adding functionality (panels)\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2]{style=\"opacity:0.25\"} 3 [4 5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-5|6|7-10\"}\nggplot(mdata |> filter(county %in% c('Turkana', 'Busia', 'Nairobi'))) + \n  geom_point(aes(x = itn_coverage, y = pfpr, color = residence)) + \n  geom_smooth(aes(x = itn_coverage, y = pfpr, color = residence)) + \n  scale_x_continuous(labels = percent_format()) + \n  scale_y_continuous(labels = percent_format()) +\n  facet_wrap(~county, scale = 'free') + \n  labs(title = 'The relationship between ITN use and PfPr',\n       x = 'ITN Coverage (%)',\n       y = 'PfPr (%)') + \n  theme_bw()\n```\n:::\n\n\n\n. . .\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](NEAIR_files/figure-revealjs/unnamed-chunk-21-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2]{style=\"opacity:0.25\"} 3 [4 5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](NEAIR_files/figure-revealjs/unnamed-chunk-22-1.png){fig-align='center' width=1344}\n:::\n:::\n\n\n\n\n---\n\n## Bar charts and column charts\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2 3]{style=\"opacity:0.25\"} 4 [5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-4\"}\nrain_data <- read.csv('data/interim/rainfall_data.csv')\n\nhead(rain_data)\n```\n:::\n\n\n\n. . .\n\nHow do we filter to end up with: year: 2023,  the counties: [Mombasa, Turkana, Nyeri], residence: urban centers only ?\n\nHow do we order the dataset by county, year and month ?\n\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-14\"}\nrain_data <- read.csv('data/interim/rainfall_data.csv')\n\nr1_data <- rain_data |>\n  \n  # adding andf modifying existing columns\n  mutate(month = factor(month, levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\",\n                                              \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \n                                              \"Oct\", \"Nov\", \"Dec\"))) |>\n  \n  # filtering\n  filter(county %in% c('Mombasa', 'Turkana', 'Nyeri') & year == 2023 & residence == 'urban') |>\n  \n  # ordering\n  arrange(desc(year), month, county)\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n---\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2 3]{style=\"opacity:0.25\"} 4 [5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-5|6|7-10\"}\nggplot(data = r1_data |> filter(county == 'Mombasa')) + \n  geom_col(aes(x = month, y = rainfall)) + \n  labs(title = 'Monthly rainfall (in mm)',\n       x = 'Month',\n       y = 'Rainfall values (in mm)') + \n  theme_bw()\n```\n:::\n\n\n\n. . .\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](NEAIR_files/figure-revealjs/unnamed-chunk-27-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2 3]{style=\"opacity:0.25\"} 4 [5 6]{style=\"opacity:0.25\"}\n:::\n:::\n\nPlotting the rest ...\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-5|6|7-10\"}\nggplot(data = r1_data) + \n  geom_col(aes(x = month, y = rainfall, fill = county)) + \n  labs(title = 'Monthly rainfall (in mm)',\n       x = 'Month',\n       y = 'Rainfall values (in mm)') + \n  theme_bw() + \n  facet_wrap(~county, nrow = 2)\n```\n:::\n\n\n\n. . .\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](NEAIR_files/figure-revealjs/unnamed-chunk-29-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n## Maps\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2 3 4]{style=\"opacity:0.25\"} 5 [6]{style=\"opacity:0.25\"}\n:::\n:::\n\nFor plotting maps, we will need a shapefile - essentially a data object holding the geometry of locations, to be plotted on maps (boundaries, lines, etc)\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-4\"}\nshp <- st_read('data/interim/shp/kenyan_counties.shp')\nhead(shp)\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `kenyan_counties' from data source \n  `/Users/cema/Documents/GitHub/malaria-training/R/NEAIR/data/interim/shp/kenyan_counties.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 47 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 33.90959 ymin: -4.720417 xmax: 41.92622 ymax: 5.061166\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 33.90959 ymin: -1.031154 xmax: 37.93591 ymax: 1.660731\nGeodetic CRS:  WGS 84\n  iso3c country          name_1                       geometry\n1   KEN   Kenya         Baringo MULTIPOLYGON (((35.77199 -0...\n2   KEN   Kenya           Bomet MULTIPOLYGON (((35.26166 -1...\n3   KEN   Kenya         Bungoma MULTIPOLYGON (((34.87053 0....\n4   KEN   Kenya           Busia MULTIPOLYGON (((34.02997 -0...\n5   KEN   Kenya Elgeyo-Marakwet MULTIPOLYGON (((35.52365 0....\n6   KEN   Kenya            Embu MULTIPOLYGON (((37.67188 -0...\n```\n\n\n:::\n:::\n\n\n\n\n---\n\n## Plotting simple maps - without data\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2 3 4]{style=\"opacity:0.25\"} 5 [6]{style=\"opacity:0.25\"}\n:::\n:::\n\nThe geometric object to use is the `geom_sf`, and a neat theme, preferrably `theme_void`\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-4\"}\nggplot(shp) + \n  geom_sf(aes(geometry = geometry, fill = name_1), \n          show.legend = F) + \n  theme_void()\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](NEAIR_files/figure-revealjs/unnamed-chunk-33-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n---\n\n## Plotting simple maps - with PfPr data\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2 3 4]{style=\"opacity:0.25\"} 5 [6]{style=\"opacity:0.25\"}\n:::\n:::\n\nWe need to merge our datasets together (shapefile and data), to have a single shapefile with the data column of interest, the `EIR` (transmission intensity).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-7\"}\neir_data <- read.csv('data/interim/eir_data.csv')\nshp_data <- merge(shp, eir_data, by = 'name_1')\n\nggplot(shp_data) + \n  geom_sf(aes(geometry = geometry, fill = eir)) + \n  theme_void()\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](NEAIR_files/figure-revealjs/unnamed-chunk-35-1.png){fig-align='center' width=384}\n:::\n:::\n\n\n\n\n---\n\n## ggplot2 resources\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2 3 4 5]{style=\"opacity:0.25\"} 6\n:::\n:::\n\nfrom [R for Data Science](https://r4ds.had.co.nz/data-visualisation.html)\n\n<br>\n\n[Data Visualization: a practical introduction](https://socviz.co/index.html#preface)\n\n<br>\n\ncreating [custom themes](https://themockup.blog/posts/2020-12-26-creating-and-using-custom-ggplot2-themes/)\n\n<br>\n\nthe [ggplot2 book](https://ggplot2-book.org/)\n\n<br>\n\nthe [R graph gallery](https://r-graph-gallery.com/index.html)\n\n---\n\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2 3 4 5]{style=\"opacity:0.25\"} 6\n:::\n:::\n\nExamples of plots from R-Gallery:\n\n\n\n```{=html}\n<iframe width=\"1000\" height=\"600\" src=\"https://r-graph-gallery.com/\" title=\"R graph Gallery example\"></iframe>\n```\n\n\n\n---\n\n## Putting it all together\n\n::: {.absolute top=\"0\" left=\"100%\"}\n::: {.sectionhead}\n[1 2 3 4 5]{style=\"opacity:0.25\"} 6\n:::\n:::\n\n<br>\n\nwith what we've done so far, in your `.R` file:\n\n::: {.incremental}\n- Basics and fundamentals of R programming\n- Visualization of epi data\n:::\n\n. . .\n\n::: {style=\"text-align: center\"}\n**and that file would make it extremely easy for you or someone else to reproduce this analysis.**\n:::\n",
    "supporting": [
      "NEAIR_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}